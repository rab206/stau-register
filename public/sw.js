'use strict';const CACHE_VERSION=1;let CURRENT_CACHES={offline:'offline-v'+CACHE_VERSION};const OFFLINE_URL='offline.html';function createCacheBustedRequest(a){let b=new Request(a,{cache:'reload'});if('cache'in b)return b;let c=new URL(a,self.location.href);return c.search+=(c.search?'&':'')+'cachebust='+Date.now(),new Request(c)}self.addEventListener('install',(a)=>{a.waitUntil(fetch(createCacheBustedRequest(OFFLINE_URL)).then(function(b){return caches.open(CURRENT_CACHES.offline).then(function(c){return c.put(OFFLINE_URL,b)})}))}),self.addEventListener('activate',(a)=>{let b=Object.keys(CURRENT_CACHES).map(function(c){return CURRENT_CACHES[c]});a.waitUntil(caches.keys().then((c)=>{return Promise.all(c.map((d)=>{if(-1===b.indexOf(d))return console.log('Deleting out of date cache:',d),caches.delete(d)}))}))}),self.addEventListener('fetch',(a)=>{('navigate'===a.request.mode||'GET'===a.request.method&&a.request.headers.get('accept').includes('text/html'))&&(console.log('Handling fetch event for',a.request.url),a.respondWith(fetch(a.request).catch((b)=>{return console.log('Fetch failed; returning offline page instead.',b),caches.match(OFFLINE_URL)})))});
//# sourceMappingURL=sw.js.map
