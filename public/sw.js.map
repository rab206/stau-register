{"version":3,"sources":["sw.js"],"names":["CACHE_VERSION","CURRENT_CACHES","prefetch","self","addEventListener","Date","now","console","log","urlsToPrefetch","event","waitUntil","caches","open","then","map","URL","urlToPrefetch","location","href","url","search","Request","mode","fetch","request","status","Error","response","statusText","cache","put","catch","error","Promise","all","cachePromises","Object","keys","key","cacheNames","indexOf","cacheName","delete","respondWith","match"],"mappings":"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","file":"sw.js","sourcesContent":["'use strict';\n/* global Request, Response, caches, URL, fetch */\n\nvar CACHE_VERSION = 1;\nvar CURRENT_CACHES = {\n  prefetch: 'prefetch-cache-v' + CACHE_VERSION\n};\n\nself.addEventListener('install', function(event) {\n  var now = Date.now();\n\n  var urlsToPrefetch = [\n      '/'\n      ,'/index.html'\n      , '/index.js'\n      , '/datalist-polyfill.js'\n      , '/tachyons.css'\n      , 'https://fonts.gstatic.com/s/roboto/v15/CWB0XYA8bzo0kSThX0UTuA.woff2'\n      , 'https://fonts.gstatic.com/s/roboto/v15/d-6IYplOFocCacKzxwXSOFtXRa8TVwTICgirnJhmVJw.woff2'\n      , '/eagle_logo_s.png'\n      , '/favicon.ico'\n  ];\n\n  // All of these logging statements should be visible via the \"Inspect\" interface\n  // for the relevant SW accessed via chrome://serviceworker-internals\n  console.log('Handling install event. Resources to prefetch:', urlsToPrefetch);\n\n  event.waitUntil(\n    caches.open(CURRENT_CACHES.prefetch).then(function(cache) {\n      var cachePromises = urlsToPrefetch.map(function(urlToPrefetch) {\n        // This constructs a new URL object using the service worker's script location as the base\n        // for relative URLs.\n        var url = new URL(urlToPrefetch, location.href);\n        // Append a cache-bust=TIMESTAMP URL parameter to each URL's query string.\n        // This is particularly important when precaching resources that are later used in the\n        // fetch handler as responses directly, without consulting the network (i.e. cache-first).\n        // If we were to get back a response from the HTTP browser cache for this precaching request\n        // then that stale response would be used indefinitely, or at least until the next time\n        // the service worker script changes triggering the install flow.\n        url.search += (url.search ? '&' : '?') + 'cache-bust=' + now;\n\n        // It's very important to use {mode: 'no-cors'} if there is any chance that\n        // the resources being fetched are served off of a server that doesn't support\n        // CORS (http://en.wikipedia.org/wiki/Cross-origin_resource_sharing).\n        // In this example, www.chromium.org doesn't support CORS, and the fetch()\n        // would fail if the default mode of 'cors' was used for the fetch() request.\n        // The drawback of hardcoding {mode: 'no-cors'} is that the response from all\n        // cross-origin hosts will always be opaque\n        // (https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#cross-origin-resources)\n        // and it is not possible to determine whether an opaque response represents a success or failure\n        // (https://github.com/whatwg/fetch/issues/14).\n        var request = new Request(url, {mode: 'cors'});\n        return fetch(request).then(function(response) {\n          if (response.status >= 400) {\n            throw new Error('request for ' + urlToPrefetch +\n              ' failed with status ' + response.statusText);\n          }\n\n          // Use the original URL without the cache-busting parameter as the key for cache.put().\n          return cache.put(urlToPrefetch, response);\n        }).catch(function(error) {\n          console.error('Not caching ' + urlToPrefetch + ' due to ' + error);\n        });\n      });\n\n      return Promise.all(cachePromises).then(function() {\n        console.log('Pre-fetching complete.');\n      });\n    }).catch(function(error) {\n      console.error('Pre-fetching failed:', error);\n    })\n  );\n});\n\nself.addEventListener('activate', function(event) {\n  // Delete all caches that aren't named in CURRENT_CACHES.\n  // While there is only one cache in this example, the same logic will handle the case where\n  // there are multiple versioned caches.\n  var expectedCacheNames = Object.keys(CURRENT_CACHES).map(function(key) {\n    return CURRENT_CACHES[key];\n  });\n\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.map(function(cacheName) {\n          if (expectedCacheNames.indexOf(cacheName) === -1) {\n            // If this cache name isn't present in the array of \"expected\" cache names, then delete it.\n            console.log('Deleting out of date cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\nself.addEventListener('fetch', function(event) {\n  console.log('Handling fetch event for', event.request.url);\n\n  event.respondWith(\n    // caches.match() will look for a cache entry in all of the caches available to the service worker.\n    // It's an alternative to first opening a specific named cache and then matching on that.\n    caches.match(event.request).then(function(response) {\n      if (response) {\n        console.log('Found response in cache:', response);\n\n        return response;\n      }\n\n      console.log('No response found in cache. About to fetch from network...');\n\n      // event.request will always have the proper mode set ('cors, 'no-cors', etc.) so we don't\n      // have to hardcode 'no-cors' like we do when fetch()ing in the install handler.\n      return fetch(event.request).then(function(response) {\n        console.log('Response from network is:', response);\n\n        return response;\n      }).catch(function(error) {\n        // This catch() will handle exceptions thrown from the fetch() operation.\n        // Note that a HTTP error response (e.g. 404) will NOT trigger an exception.\n        // It will return a normal response object that has the appropriate error code set.\n        console.error('Fetching failed:', error);\n\n        throw error;\n      });\n    })\n  );\n});\n"]}